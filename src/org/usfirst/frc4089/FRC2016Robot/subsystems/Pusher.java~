// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.FRC2016Robot.subsystems;

import org.usfirst.frc4089.FRC2016Robot.RobotMap;
import org.usfirst.frc4089.FRC2016Robot.commands.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Pusher extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogPotentiometer liftPoten = RobotMap.pusherLiftPoten;
    private final CANTalon liftAngleDriver = RobotMap.pusherLiftAngleDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private PIDController pid;
    private boolean isManualDriveAllowed;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new PusherManageDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        /*pid = new PIDController(0.05, 0, 0, liftPoten, liftAngleDriver);
        pid.setInputRange(0, 270);
        pid.setOutputRange(-1.0, 1.0);
		pid.setSetpoint(0);*/
        liftAngleDriver.setPID(0.05, 0, 0);
        liftAngleDriver.setPIDSourceType(PIDSourceType.kDisplacement);
        liftAngleDriver.setFeedbackDevice(FeedbackDevice.AnalogPot);
        setTargetPos(0);
		
		isManualDriveAllowed = true;
        
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void setTargetPos(double angle)
    {
    	//pid.setSetpoint(angle);
    	//0-270 -> 0-1023
    	double talonNativePerDegree = 1023.0 / 270.0;
    	liftAngleDriver.setSetpoint(angle * talonNativePerDegree);
    }
    
    public double potValue(){
	  	//return liftPoten.get();
    	return liftAngleDriver.getAnalogInRaw() * 270.0 / 1023.0;
    }
	public void articulateDown(double speed){
		if(potValue() >= 0.1)
		{
			liftAngleDriver.set(speed);
		}
	}
	public void articulateUp(double speed){
		if(potValue() <= 269.9)
		{
			liftAngleDriver.set(speed);
		}
	}
	
	public void PIDDriveToSetpoint()
	{
		SmartDashboard.putNumber("PotAngle", potValue());
    	SmartDashboard.putNumber("PIDCurPow", liftAngleDriver.getOutputVoltage());
		/*if(!pid.isEnabled())
		{
			pid.enable();
		}*/
    	if(liftAngleDriver.getControlMode() != TalonControlMode.Position)
    	{
    		liftAngleDriver.changeControlMode(TalonControlMode.Position);
    		liftAngleDriver.enableControl();
    	}
		isManualDriveAllowed = false;
	}
	public boolean isPIDDone()
	{
		return false;//liftAngleDriver.isAlive();//Math.abs(pid.getError()) < 1;
	}
	public void endPIDDrive()
	{
		//pid.disable();
		liftAngleDriver.changeControlMode(TalonControlMode.PercentVbus);
		liftAngleDriver.disableControl();
		isManualDriveAllowed = true;
	}
	
	public void drive(double speed)
	{
		if(!isManualDriveAllowed) return;
		speed *= -1;
		if(speed > 0)
		{
			articulateUp(speed);
		}
		else if(speed < 0)
		{
			articulateDown(speed);
		}
		else
		{
			stop();
		}
	}
	public void stop()
	{
		liftAngleDriver.set(0);
	}
}

