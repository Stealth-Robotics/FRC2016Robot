// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.FRC2016Robot;

import org.usfirst.frc4089.FRC2016Robot.Util.NSSensors;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DigitalInput driveTrainLeftLinePseudoLimit;
    public static DigitalInput driveTrainRightLinePseudoLimit;
    public static CANTalon driveTrainMDrive1;
    public static CANTalon driveTrainMDrive2;
    public static CANTalon driveTrainMDrive3;
    public static CANTalon driveTrainMDrive4;
    public static RobotDrive driveTrainRDrive;
    public static Solenoid driveTrainDriveShifter;
    public static CANTalon spinShooterLeftSpin;
    public static CANTalon spinShooterRightSpin;
    public static RobotDrive spinShooterShotDrive;
    public static Solenoid spinShooterSpinShooterElevate;
    public static DigitalInput barClimbLSTop;
    public static DigitalInput barClimbLSBot;
    public static CANTalon barClimbWinchMotor;
    public static Solenoid barClimbRaiseSolenoid;
    public static CANTalon collectorMCollectorSlide;
    public static DigitalInput collectorLSCollectorIn;
    public static DigitalInput collectorLSCollectorOut;
    public static DigitalInput collectorLSCollectorStage;
    public static CANTalon collectorCollectorMotor;
    public static AnalogGyro sensorsAnalogGyro1;
    public static DigitalInput sensorsDigitalAccel;
    public static AnalogPotentiometer pusherLiftPoten;
    public static CANTalon pusherLiftAngleDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftLinePseudoLimit = new DigitalInput(2);
        LiveWindow.addSensor("DriveTrain", "LeftLinePseudoLimit", driveTrainLeftLinePseudoLimit);
        
        driveTrainRightLinePseudoLimit = new DigitalInput(3);
        LiveWindow.addSensor("DriveTrain", "RightLinePseudoLimit", driveTrainRightLinePseudoLimit);
        
        driveTrainMDrive1 = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "MDrive1", driveTrainMDrive1);
        
        driveTrainMDrive2 = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain", "MDrive2", driveTrainMDrive2);
        
        driveTrainMDrive3 = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain", "MDrive3", driveTrainMDrive3);
        
        driveTrainMDrive4 = new CANTalon(4);
        LiveWindow.addActuator("DriveTrain", "MDrive4", driveTrainMDrive4);
        
        driveTrainRDrive = new RobotDrive(driveTrainMDrive1, driveTrainMDrive2,
              driveTrainMDrive3, driveTrainMDrive4);
        
        driveTrainRDrive.setSafetyEnabled(true);
        driveTrainRDrive.setExpiration(0.1);
        driveTrainRDrive.setSensitivity(0.5);
        driveTrainRDrive.setMaxOutput(1.0);

        driveTrainDriveShifter = new Solenoid(0, 0);
        LiveWindow.addActuator("DriveTrain", "DriveShifter", driveTrainDriveShifter);
        
        spinShooterLeftSpin = new CANTalon(5);
        LiveWindow.addActuator("SpinShooter", "LeftSpin", spinShooterLeftSpin);
        
        spinShooterRightSpin = new CANTalon(6);
        LiveWindow.addActuator("SpinShooter", "RightSpin", spinShooterRightSpin);
        
        spinShooterShotDrive = new RobotDrive(spinShooterLeftSpin, spinShooterRightSpin);
        
        spinShooterShotDrive.setSafetyEnabled(true);
        spinShooterShotDrive.setExpiration(0.1);
        spinShooterShotDrive.setSensitivity(0.5);
        spinShooterShotDrive.setMaxOutput(1.0);

        spinShooterSpinShooterElevate = new Solenoid(0, 1);
        LiveWindow.addActuator("SpinShooter", "SpinShooterElevate", spinShooterSpinShooterElevate);
        
        barClimbLSTop = new DigitalInput(4);
        LiveWindow.addSensor("BarClimb", "LSTop", barClimbLSTop);
        
        barClimbLSBot = new DigitalInput(5);
        LiveWindow.addSensor("BarClimb", "LSBot", barClimbLSBot);
        
        barClimbWinchMotor = new CANTalon(7);
        LiveWindow.addActuator("BarClimb", "WinchMotor", barClimbWinchMotor);
        
        barClimbRaiseSolenoid = new Solenoid(0, 2);
        LiveWindow.addActuator("BarClimb", "RaiseSolenoid", barClimbRaiseSolenoid);
        
        collectorMCollectorSlide = new CANTalon(8);
        LiveWindow.addActuator("Collector", "MCollectorSlide", collectorMCollectorSlide);
        
        collectorLSCollectorIn = new DigitalInput(6);
        LiveWindow.addSensor("Collector", "LSCollectorIn", collectorLSCollectorIn);
        
        collectorLSCollectorOut = new DigitalInput(7);
        LiveWindow.addSensor("Collector", "LSCollectorOut", collectorLSCollectorOut);
        
        collectorLSCollectorStage = new DigitalInput(8);
        LiveWindow.addSensor("Collector", "LSCollectorStage", collectorLSCollectorStage);
        
        collectorCollectorMotor = new CANTalon(9);
        LiveWindow.addActuator("Collector", "CollectorMotor", collectorCollectorMotor);
        
        sensorsAnalogGyro1 = new AnalogGyro(0);
        LiveWindow.addSensor("Sensors", "AnalogGyro1", sensorsAnalogGyro1);
        sensorsAnalogGyro1.setSensitivity(0.007);
        sensorsDigitalAccel = new DigitalInput(9);
        LiveWindow.addSensor("Sensors", "DigitalAccel", sensorsDigitalAccel);
        
        pusherLiftPoten = new AnalogPotentiometer(1, 270.0, 0.0);
        LiveWindow.addSensor("Pusher", "LiftPoten", pusherLiftPoten);
        
        pusherLiftAngleDriver = new CANTalon(10);
        LiveWindow.addActuator("Pusher", "LiftAngleDriver", pusherLiftAngleDriver);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        NSSensors.init();
    }
}
