// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.FRC2016Robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4089.FRC2016Robot.Robot;
import org.usfirst.frc4089.FRC2016Robot.Util.ClassifiedScore;
import org.usfirst.frc4089.FRC2016Robot.Util.ScoreCollection;
import org.usfirst.frc4089.FRC2016Robot.Util.VisionProcessing;
import org.usfirst.frc4089.FRC2016Robot.Util.VisionRunnable;

/**
 *
 */
public class AlignToVision extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	boolean _isAligned;
	double elapsedTime;
	double timer;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AlignToVision() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        _isAligned = false;
        elapsedTime = 0;
        timer = 0;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.ShiftLow();
    	_isAligned = false;
    	elapsedTime = 0;
    	timer = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	elapsedTime = timeSinceInitialized() - timer;
    	timer += elapsedTime;
    	//track total runtime. terminate if we've tried for over 2 seconds
    	/*if(timer >= 10.0)
    	{
    		_isAligned = true;
    		return;
    	}*/
    	ScoreCollection scores = VisionRunnable.getThreadSafeScore();
		if(scores == null) return;
		ClassifiedScore best = scores.getBestTarget();
		if(best == null) return;
		if(Math.abs(best.AimingPos.x) < 0.15)
		{
			_isAligned = true;
			return;
		}
    	double turnPow = best.AimingPos.x;//-1 to +1. how convenient.
    	Robot.driveTrain.Drive(turnPow, 0);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return _isAligned;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.Drive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
